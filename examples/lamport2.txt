fn verify_bit_signature(pk_0: bytes32, pk_1: bytes32, msg: bool, sig: bytes32) {
    let hash: bytes32 = op::sha256(sig);
    if msg {
        op::check_equal(hash, pk_0);
    } else {
        op::check_equal(hash, pk_1);
    }
}

fn verify_bit_signature_bool(pk_0: bytes32, pk_1: bytes32, msg: bool, sig: bytes32) -> bool {
    let hash: bytes32 = op::sha256(sig);
    if msg {
        op::equal(hash, pk_0);
    } else {
        op::equal(hash, pk_1);
    }
}

fn main() -> bool {
    let pk0_0: bytes32 = 0xc80c640408ecbc98dba4ea863633264a6e8014d987efdf0df88cae12bba173ee;
    let pk0_1: bytes32 = 0x1d1129155942bc7e56ef95bfdade64d7e06640d57e1a4e3dbb4154aa23762365;
    let pk1_0: bytes32 = 0xd71cefbc667ad84d7e57c645c43f2ab5eaa989351e7c4bc774adc525929a0c07;
    let pk1_1: bytes32 = 0xb503b93be53e5156b9ea93aab50198c4553c070cbab8122016f653b8df24fb4c;
    let pk2_0: bytes32 = 0x20c71b560f4954111c4fa6c16ca0cdb63896ae69c8c6a9e4060491d5ea7dc0f5;
    let pk2_1: bytes32 = 0x7da4d898046669ebf7a81a771bbdbcfccfdcd9b9c7c61e1f44b278915cb9bc58;
    let pk3_0: bytes32 = 0xc2b0d82c826c909e2281e08029431ab39e9271d38c649fa6bea0de9523a59533;
    let pk3_1: bytes32 = 0x74e9ad16e3c8440bd36a3f213f95443c2ae4884a3729002da2e047a247a7def8;

    let msg0: bool = witness("msg0");
    let msg1: bool = witness("msg1");
    let msg2: bool = witness("msg2");
    let msg3: bool = witness("msg3");
    // Sign each message bit with the corresponding secret key.
    let sig0: bytes32 = witness("sig0");
    let sig1: bytes32 = witness("sig1");
    let sig2: bytes32 = witness("sig2");
    let sig3: bytes32 = witness("sig3");

    verify_bit_signature(pk0_0, pk0_1, msg0, sig0);
    verify_bit_signature(pk1_0, pk1_1, msg1, sig1);
    verify_bit_signature(pk2_0, pk2_1, msg2, sig2);
    verify_bit_signature_bool(pk3_0, pk3_1, msg3, sig3)
}
